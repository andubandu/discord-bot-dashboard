<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %> | Discord Bot Dashboard</title>
    <style>
    :root {
      --discord-blue: #5865F2;
      --discord-green: #57F287;
      --discord-yellow: #FEE75C;
      --discord-red: #ED4245;
      --discord-dark: #36393F;
      --discord-darker: #2F3136;
      --discord-darkest: #202225;
      --discord-light: #FFFFFF;
      --discord-muted: #B9BBBE;
      --discord-border: #23272A;
    }
    body {
      background: linear-gradient(135deg, var(--discord-darkest) 0%, var(--discord-darker) 100%);
      color: var(--discord-light);
      font-family: 'Inter', sans-serif;
      margin: 0;
    }
    .bg-discord-dark { background: var(--discord-dark); }
    .bg-discord-darker { background: var(--discord-darker); }
    .bg-discord-darkest { background: var(--discord-darkest); }
    .bg-discord-blue { background: var(--discord-blue); }
    .bg-discord-blue-hover { background: #4752C4; }
    .text-discord-blue { color: var(--discord-blue); }
    .text-discord-light { color: var(--discord-light); }
    .text-discord-muted { color: var(--discord-muted); }
    .text-discord-red { color: var(--discord-red); }
    .border-discord-border { border-color: var(--discord-border); }
    .rounded { border-radius: 0.5rem; }
    .rounded-full { border-radius: 9999px; }
    .shadow-lg { box-shadow: 0 8px 24px rgba(0,0,0,0.2); }
    .hover\:bg-discord-dark-hover:hover { background: #23272A; }
    .transition-colors { transition: background 0.2s, color 0.2s; }
    .font-bold { font-weight: 700; }
    .font-medium { font-weight: 500; }
    .truncate { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
    .group:hover .group-hover\:text-discord-light { color: var(--discord-light); }
    .w-8 { width: 2rem; }
    .h-8 { height: 2rem; }
    .w-10 { width: 2.5rem; }
    .h-10 { height: 2.5rem; }
    .w-12 { width: 3rem; }
    .h-12 { height: 3rem; }
    .mr-1 { margin-right: 0.25rem; }
    .mr-2 { margin-right: 0.5rem; }
    .mr-3 { margin-right: 0.75rem; }
    .ml-3 { margin-left: 0.75rem; }
    .p-4 { padding: 1rem; }
    .py-1 { padding-top: 0.25rem; padding-bottom: 0.25rem; }
    .px-2 { padding-left: 0.5rem; padding-right: 0.5rem; }
    .px-4 { padding-left: 1rem; padding-right: 1rem; }
    .py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
    .rounded-l-md { border-radius: 0.375rem 0 0 0.375rem; }
    .rounded-r-md { border-radius: 0 0.375rem 0.375rem 0; }
    .border { border-width: 1px; }
    .focus\:outline-none:focus { outline: none; }
    .focus\:ring-2:focus { box-shadow: 0 0 0 2px var(--discord-blue); }
    .focus\:ring-discord-blue:focus { box-shadow: 0 0 0 2px var(--discord-blue); }
    .hover\:opacity-80:hover { opacity: 0.8; }
    .hover\:underline:hover { text-decoration: underline; }
    .bg-discord-red\/20 { background: rgba(237,66,69,0.2); }
    .border-discord-red\/30 { border-color: rgba(237,66,69,0.3); }
  </style>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
  <script src="/socket.io/socket.io.js"></script>
</head>
<body class="bg-discord-dark text-white">
  <div class="flex h-screen overflow-hidden">
    <%- include('partials/sidebar', { active: 'dashboard' }) %>
    <main class="flex-1 overflow-y-auto bg-discord-dark">
      <div class="container mx-auto px-4 py-8 max-w-7xl">
        <header class="mb-8">
          <div class="flex items-center justify-between">
            <h1 class="text-3xl font-bold">Dashboard</h1>
            
            <div class="flex items-center">
              <span id="connection-status" class="inline-flex items-center rounded-full px-3 py-1 text-sm font-medium mr-3 bg-discord-green/20 text-discord-green">
                <span class="pulse-dot mr-2"></span>
                Connected
              </span>
              
              <button id="btn-logout" class="inline-flex items-center text-sm font-medium text-discord-muted hover:text-white transition-colors duration-200">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-1"><path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path><polyline points="16 17 21 12 16 7"></polyline><line x1="21" y1="12" x2="9" y2="12"></line></svg>
                Logout
              </button>
            </div>
          </div>
        </header>
        
        <section class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <div class="bg-discord-darker rounded-lg shadow-lg p-6">
            <div class="flex items-center mb-4">
              <img 
                src="<%= data.bot.avatar %>" 
                alt="<%= data.bot.username %>" 
                class="w-16 h-16 rounded-full mr-4 border-2 border-discord-blue"
              >
              <div>
                <h2 class="text-xl font-semibold"><%= data.bot.username %></h2>
                <p class="text-discord-muted text-sm">@<%= data.bot.username %></p>
              </div>
            </div>
            
            <div class="grid grid-cols-2 gap-4 text-sm">
              <div>
                <p class="text-discord-muted">Status</p>
                <p class="font-medium capitalize"><%= data.bot.presence.status || 'online' %></p>
              </div>
              <div>
                <p class="text-discord-muted">Activity</p>
                <p class="font-medium">
                  <% if (data.bot.presence.activity) { %>
                    <%= data.bot.presence.activity %>
                  <% } else { %>
                    None
                  <% } %>
                </p>
              </div>
              <div>
                <p class="text-discord-muted">Uptime</p>
                <p class="font-medium"><span id="uptime-display">Loading...</span></p>
              </div>
              <div>
                <p class="text-discord-muted">Servers</p>
                <p class="font-medium"><%= data.guilds.length %></p>
              </div>
            </div>
          </div>
          
          <div class="bg-discord-darker rounded-lg shadow-lg p-6">
            <h3 class="text-lg font-semibold mb-4">Presence Control</h3>
            
            <form id="presence-form" class="space-y-4">
              <div>
                <label for="status" class="block text-sm font-medium text-discord-muted mb-2">Status</label>
                <select id="status" name="status" class="w-full px-3 py-2 bg-discord-darkest border border-discord-border rounded-md">
                  <option value="online" <%= data.bot.presence.status === 'online' ? 'selected' : '' %>>Online</option>
                  <option value="idle" <%= data.bot.presence.status === 'idle' ? 'selected' : '' %>>Idle</option>
                  <option value="dnd" <%= data.bot.presence.status === 'dnd' ? 'selected' : '' %>>Do Not Disturb</option>
                  <option value="invisible" <%= data.bot.presence.status === 'invisible' ? 'selected' : '' %>>Invisible</option>
                </select>
              </div>
              
              <div>
                <label for="activity" class="block text-sm font-medium text-discord-muted mb-2">Activity</label>
                <input 
                  type="text" 
                  id="activity" 
                  name="activity" 
                  class="w-full px-3 py-2 bg-discord-darkest border border-discord-border rounded-md"
                  placeholder="e.g. Playing a game"
                  value="<%= data.bot.presence.activity || '' %>"
                >
              </div>
              
              <div>
                <label for="activity-type" class="block text-sm font-medium text-discord-muted mb-2">Activity Type</label>
                <select id="activity-type" name="type" class="w-full px-3 py-2 bg-discord-darkest border border-discord-border rounded-md">
                  <option value="playing">Playing</option>
                  <option value="streaming">Streaming</option>
                  <option value="listening">Listening to</option>
                  <option value="watching">Watching</option>
                  <option value="competing">Competing in</option>
                </select>
              </div>
              
              <button 
                type="submit" 
                class="w-full bg-discord-blue hover:bg-discord-blue-hover text-white font-medium py-2 px-4 rounded-md transition-colors duration-200"
              >
                Update Presence
              </button>
            </form>
          </div>
          
          <div class="bg-discord-darker rounded-lg shadow-lg p-6">
            <h3 class="text-lg font-semibold mb-4">Event Log</h3>
            <div id="event-log" class="h-48 overflow-y-auto bg-discord-darkest rounded-md p-3 text-sm font-mono">
              <div class="text-discord-green">
                [<%= new Date().toLocaleTimeString() %>] Bot connected
              </div>
              <% data.guilds.forEach(guild => { %>
                <div class="text-discord-muted">
                  [<%= new Date().toLocaleTimeString() %>] Joined guild: <%= guild.name %>
                </div>
              <% }); %>
            </div>
          </div>
        </section>
        
        <!-- Servers Section -->
        <section class="mb-8">
          <div class="flex items-center justify-between mb-4">
            <h2 class="text-2xl font-bold">Servers (<%= data.guilds.length %>)</h2>
            <button id="refresh-guilds" class="text-sm text-discord-blue hover:underline">
              Refresh
            </button>
          </div>
          
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4" id="guild-list">
            <% data.guilds.forEach(guild => { %>
              <a href="/dashboard/guilds/<%= guild.id %>" class="block bg-discord-darker hover:bg-discord-dark-hover rounded-lg shadow-md overflow-hidden transition-colors duration-200">
                <div class="p-4">
                  <div class="flex items-center">
                    <% if (guild.icon) { %>
                      <img src="<%= guild.icon %>" alt="<%= guild.name %>" class="w-12 h-12 rounded-full mr-4">
                    <% } else { %>
                      <div class="w-12 h-12 rounded-full bg-discord-blue flex items-center justify-center mr-4">
                        <span class="text-xl font-bold"><%= guild.name.charAt(0) %></span>
                      </div>
                    <% } %>
                    <div>
                      <h3 class="font-semibold truncate" title="<%= guild.name %>">
                        <%= guild.name %>
                      </h3>
                      <p class="text-sm text-discord-muted">
                        <%= guild.memberCount %> members
                      </p>
                    </div>
                  </div>
                </div>
              </a>
            <% }); %>
          </div>
        </section>
      </div>
    </main>
  </div>
  
  <script>
    function formatUptime(ms) {
      const seconds = Math.floor(ms / 1000);
      const minutes = Math.floor(seconds / 60);
      const hours = Math.floor(minutes / 60);
      const days = Math.floor(hours / 24);
      
      return days > 0 
        ? `${days}d ${hours % 24}h ${minutes % 60}m`
        : hours > 0
          ? `${hours}h ${minutes % 60}m ${seconds % 60}s`
          : minutes > 0
            ? `${minutes}m ${seconds % 60}s`
            : `${seconds}s`;
    }
    
    function updateUptime() {
      const uptimeEl = document.getElementById('uptime-display');
      let uptime = <%= data.uptime %>;
      
      uptimeEl.textContent = formatUptime(uptime);
      
      setInterval(() => {
        uptime += 1000;
        uptimeEl.textContent = formatUptime(uptime);
      }, 1000);
    }
    
    document.addEventListener('DOMContentLoaded', () => {
      updateUptime();
      
      const socket = io();
      const eventLog = document.getElementById('event-log');
      const connectionStatus = document.getElementById('connection-status');
      const logoutBtn = document.getElementById('btn-logout');
      const presenceForm = document.getElementById('presence-form');
      
      socket.emit('authenticate', { token: '<%= locals.token %>' });
      
      socket.on('connectionStatus', (data) => {
        if (data.connected) {
          connectionStatus.className = 'inline-flex items-center rounded-full px-3 py-1 text-sm font-medium mr-3 bg-discord-green/20 text-discord-green';
          connectionStatus.innerHTML = '<span class="pulse-dot mr-2"></span>Connected';
        } else {
          connectionStatus.className = 'inline-flex items-center rounded-full px-3 py-1 text-sm font-medium mr-3 bg-discord-red/20 text-discord-red';
          connectionStatus.innerHTML = '<span class="pulse-dot mr-2"></span>Disconnected';
        }
      });
      function logEvent(message, type = 'muted') {
        const now = new Date().toLocaleTimeString();
        const colorClass = type === 'success' 
          ? 'text-discord-green' 
          : type === 'error' 
            ? 'text-discord-red' 
            : 'text-discord-muted';
        
        const logEntry = document.createElement('div');
        logEntry.className = colorClass;
        logEntry.textContent = `[${now}] ${message}`;
        
        eventLog.appendChild(logEntry);
        eventLog.scrollTop = eventLog.scrollHeight;
      }
      
      socket.on('messageCreate', (message) => {
        logEvent(`Message in #${message.channelId}: ${message.content.substring(0, 30)}${message.content.length > 30 ? '...' : ''}`);
      });
      
      socket.on('presenceUpdate', (presence) => {
        logEvent(`Presence updated: ${presence.status} ${presence.activity ? `(${presence.activity})` : ''}`, 'success');
      });
      
      socket.on('guildCreate', (guild) => {
        logEvent(`Joined new server: ${guild.name}`, 'success');
      });
      
      socket.on('guildDelete', (guild) => {
        logEvent(`Removed from server: ${guild.id}`, 'error');
      });
      
      socket.on('botError', (error) => {
        logEvent(`Error: ${error.message}`, 'error');
      });
      
      logoutBtn.addEventListener('click', () => {
        window.location.href = '/logout';
      });
      
      presenceForm.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(presenceForm);
        const data = {
          status: formData.get('status'),
          activity: formData.get('activity'),
          type: formData.get('type')
        };
        
        try {
          const response = await fetch('/api/presence', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
          });
          
          if (response.ok) {
            logEvent('Presence updated successfully', 'success');
          } else {
            const error = await response.json();
            logEvent(`Failed to update presence: ${error.message}`, 'error');
          }
        } catch (error) {
          logEvent(`Error: ${error.message}`, 'error');
        }
      });
    });
  </script>
</body>
</html>