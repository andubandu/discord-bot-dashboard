<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %> | Discord Bot Dashboard</title>
  <style>
    :root {
      --discord-blue: #5865F2;
      --discord-green: #57F287;
      --discord-yellow: #FEE75C;
      --discord-red: #ED4245;
      --discord-dark: #36393F;
      --discord-darker: #2F3136;
      --discord-darkest: #202225;
      --discord-light: #FFFFFF;
      --discord-muted: #B9BBBE;
      --discord-border: #23272A;
    }
    body {
      background: linear-gradient(135deg, var(--discord-darkest) 0%, var(--discord-darker) 100%);
      color: var(--discord-light);
      font-family: 'Inter', sans-serif;
      margin: 0;
    }
    .bg-discord-dark { background: var(--discord-dark); }
    .bg-discord-darker { background: var(--discord-darker); }
    .bg-discord-darkest { background: var(--discord-darkest); }
    .bg-discord-blue { background: var(--discord-blue); }
    .bg-discord-blue-hover { background: #4752C4; }
    .text-discord-blue { color: var(--discord-blue); }
    .text-discord-light { color: var(--discord-light); }
    .text-discord-muted { color: var(--discord-muted); }
    .text-discord-red { color: var(--discord-red); }
    .border-discord-border { border-color: var(--discord-border); }
    .rounded { border-radius: 0.5rem; }
    .rounded-full { border-radius: 9999px; }
    .shadow-lg { box-shadow: 0 8px 24px rgba(0,0,0,0.2); }
    .hover\:bg-discord-dark-hover:hover { background: #23272A; }
    .transition-colors { transition: background 0.2s, color 0.2s; }
    .font-bold { font-weight: 700; }
    .font-medium { font-weight: 500; }
    .truncate { white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
    .group:hover .group-hover\:text-discord-light { color: var(--discord-light); }
    .w-8 { width: 2rem; }
    .h-8 { height: 2rem; }
    .w-10 { width: 2.5rem; }
    .h-10 { height: 2.5rem; }
    .w-12 { width: 3rem; }
    .h-12 { height: 3rem; }
    .mr-1 { margin-right: 0.25rem; }
    .mr-2 { margin-right: 0.5rem; }
    .mr-3 { margin-right: 0.75rem; }
    .ml-3 { margin-left: 0.75rem; }
    .p-4 { padding: 1rem; }
    .py-1 { padding-top: 0.25rem; padding-bottom: 0.25rem; }
    .px-2 { padding-left: 0.5rem; padding-right: 0.5rem; }
    .px-4 { padding-left: 1rem; padding-right: 1rem; }
    .py-2 { padding-top: 0.5rem; padding-bottom: 0.5rem; }
    .rounded-l-md { border-radius: 0.375rem 0 0 0.375rem; }
    .rounded-r-md { border-radius: 0 0.375rem 0.375rem 0; }
    .border { border-width: 1px; }
    .focus\:outline-none:focus { outline: none; }
    .focus\:ring-2:focus { box-shadow: 0 0 0 2px var(--discord-blue); }
    .focus\:ring-discord-blue:focus { box-shadow: 0 0 0 2px var(--discord-blue); }
    .hover\:opacity-80:hover { opacity: 0.8; }
    .hover\:underline:hover { text-decoration: underline; }
    .bg-discord-red\/20 { background: rgba(237,66,69,0.2); }
    .border-discord-red\/30 { border-color: rgba(237,66,69,0.3); }
  </style>
  <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap">
</head>
<body class="bg-discord-dark text-white">
  <div class="flex h-screen overflow-hidden">
    <%- include('partials/sidebar', { active: 'guilds' }) %>
    
    <main class="flex-1 overflow-y-auto bg-discord-dark">
      <div class="container mx-auto px-4 py-8 max-w-6xl">
        <header class="mb-8">
          <div class="flex items-center">
            <a href="/dashboard" class="text-discord-blue hover:underline mr-2">Dashboard</a>
            <span class="text-discord-muted mx-2">/</span>
            <a href="/dashboard/guilds/<%= guild.id %>" class="text-discord-blue hover:underline mr-2"><%= guild.name %></a>
            <span class="text-discord-muted mx-2">/</span>
            <h1 class="text-2xl font-bold">Members</h1>
          </div>
        </header>
        
        <div class="bg-discord-darker rounded-lg shadow-lg p-4 mb-8">
          <div class="flex flex-col md:flex-row md:items-center md:justify-between gap-4">
            <div class="relative">
              <input 
                type="text" 
                id="search-input" 
                placeholder="Search members..." 
                class="w-full md:w-64 px-4 py-2 bg-discord-darkest border border-discord-border rounded-md pr-10"
              >
              <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="absolute right-3 top-2.5 text-discord-muted">
                <circle cx="11" cy="11" r="8"></circle>
                <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
              </svg>
            </div>
            
            <div class="flex flex-wrap gap-2">
              <select id="role-filter" class="px-3 py-2 bg-discord-darkest border border-discord-border rounded-md">
                <option value="">All Roles</option>
              </select>
              
              <select id="status-filter" class="px-3 py-2 bg-discord-darkest border border-discord-border rounded-md">
                <option value="">All Members</option>
                <option value="bot">Bots</option>
                <option value="user">Users</option>
              </select>
              
              <button id="refresh-members" class="px-3 py-2 bg-discord-blue hover:bg-discord-blue-hover text-white rounded-md transition-colors duration-200">
                Refresh
              </button>
            </div>
          </div>
        </div>
        
        <div class="bg-discord-darker rounded-lg shadow-lg overflow-hidden">
          <div class="overflow-x-auto">
            <table class="w-full">
              <thead class="bg-discord-darkest border-b border-discord-border">
                <tr>
                  <th class="px-6 py-3 text-left text-xs font-medium text-discord-muted uppercase tracking-wider">
                    Member
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-discord-muted uppercase tracking-wider">
                    ID
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-discord-muted uppercase tracking-wider">
                    Roles
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-discord-muted uppercase tracking-wider">
                    Joined
                  </th>
                  <th class="px-6 py-3 text-left text-xs font-medium text-discord-muted uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody id="members-table-body" class="divide-y divide-discord-border">
                <tr>
                  <td colspan="5" class="px-6 py-10 text-center text-discord-muted">
                    Loading members...
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </main>
  </div>
  
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const searchInput = document.getElementById('search-input');
      const roleFilter = document.getElementById('role-filter');
      const statusFilter = document.getElementById('status-filter');
      const refreshBtn = document.getElementById('refresh-members');
      const membersTableBody = document.getElementById('members-table-body');
      
      let members = [];
      let roles = [];
      
      function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString(undefined, { 
          year: 'numeric', 
          month: 'short', 
          day: 'numeric' 
        });
      }
      
      async function loadMembers() {
        try {
          const response = await fetch('/api/guilds/<%= guild.id %>/members');
          const data = await response.json();
          
          members = data;
          
          const allRoles = [];
          members.forEach(member => {
            member.roles.forEach(role => {
              if (!allRoles.some(r => r.id === role.id)) {
                allRoles.push(role);
              }
            });
          });
          
          roles = allRoles.sort((a, b) => b.position - a.position);
          
          roleFilter.innerHTML = '<option value="">All Roles</option>';
          roles.forEach(role => {
            const option = document.createElement('option');
            option.value = role.id;
            option.textContent = role.name;
            roleFilter.appendChild(option);
          });
          
          
          renderMembers();
        } catch (error) {
          console.error('Error loading members:', error);
          membersTableBody.innerHTML = `
            <tr>
              <td colspan="5" class="px-6 py-10 text-center text-discord-red">
                Error loading members: ${error.message}
              </td>
            </tr>
          `;
        }
      }
      
      function renderMembers() {
        let filteredMembers = members;
        
        if (searchInput.value) {
          const searchTerm = searchInput.value.toLowerCase();
          filteredMembers = filteredMembers.filter(member => 
            member.username.toLowerCase().includes(searchTerm) || 
            (member.nickname && member.nickname.toLowerCase().includes(searchTerm))
          );
        }

        if (roleFilter.value) {
          filteredMembers = filteredMembers.filter(member => 
            member.roles.some(role => role.id === roleFilter.value)
          );
        }
        
        if (statusFilter.value) {
          filteredMembers = filteredMembers.filter(member => 
            (statusFilter.value === 'bot' && member.bot) ||
            (statusFilter.value === 'user' && !member.bot)
          );
        }
        
        membersTableBody.innerHTML = '';
        
        if (filteredMembers.length === 0) {
          membersTableBody.innerHTML = `
            <tr>
              <td colspan="5" class="px-6 py-10 text-center text-discord-muted">
                No members found matching the current filters.
              </td>
            </tr>
          `;
          return;
        }
        
        filteredMembers.forEach(member => {
          const row = document.createElement('tr');
          row.className = 'hover:bg-discord-dark-hover';
          
          const memberCell = document.createElement('td');
          memberCell.className = 'px-6 py-4 whitespace-nowrap';
          memberCell.innerHTML = `
            <div class="flex items-center">
              <img 
                src="${member.avatar}" 
                alt="${member.username}" 
                class="w-10 h-10 rounded-full mr-3 border border-discord-border"
              >
              <div>
                <div class="font-medium ${member.bot ? 'text-discord-blue' : ''}">
                  ${member.username}
                  ${member.bot ? '<span class="text-xs bg-discord-blue text-white px-1 py-0.5 rounded ml-2">BOT</span>' : ''}
                </div>
                ${member.nickname ? `<div class="text-sm text-discord-muted">${member.nickname}</div>` : ''}
              </div>
            </div>
          `;
          
          const idCell = document.createElement('td');
          idCell.className = 'px-6 py-4 whitespace-nowrap text-sm text-discord-muted';
          idCell.textContent = member.id;
          
          const rolesCell = document.createElement('td');
          rolesCell.className = 'px-6 py-4';
          
          if (member.roles.length > 0) {
            const rolesList = document.createElement('div');
            rolesList.className = 'flex flex-wrap gap-1';
            
            const visibleRoles = member.roles.slice(0, 3);
            const hiddenCount = Math.max(0, member.roles.length - 3);
            
            visibleRoles.forEach(role => {
              const roleElement = document.createElement('span');
              roleElement.className = 'px-2 py-1 text-xs rounded-full';
              roleElement.style.backgroundColor = role.color !== '#000000' ? role.color : 'var(--discord-darker)';
              roleElement.style.color = role.color !== '#000000' ? 'white' : 'var(--discord-muted)';
              roleElement.textContent = role.name;
              rolesList.appendChild(roleElement);
            });
            
            if (hiddenCount > 0) {
              const moreElement = document.createElement('span');
              moreElement.className = 'px-2 py-1 text-xs rounded-full bg-discord-darkest text-discord-muted';
              moreElement.textContent = `+${hiddenCount} more`;
              rolesList.appendChild(moreElement);
            }
            
            rolesCell.appendChild(rolesList);
          } else {
            rolesCell.textContent = 'No roles';
          }
          
          const joinedCell = document.createElement('td');
          joinedCell.className = 'px-6 py-4 whitespace-nowrap text-sm';
          joinedCell.textContent = formatDate(member.joinedAt);
          
          const actionsCell = document.createElement('td');
          actionsCell.className = 'px-6 py-4 whitespace-nowrap text-sm text-discord-blue';
          actionsCell.innerHTML = `
            <div class="flex space-x-2">
              <button data-member-id="${member.id}" class="hover:underline">Message</button>
              <button data-member-id="${member.id}" class="hover:underline">Kick</button>
            </div>
          `;
          
          row.appendChild(memberCell);
          row.appendChild(idCell);
          row.appendChild(rolesCell);
          row.appendChild(joinedCell);
          row.appendChild(actionsCell);
          
          membersTableBody.appendChild(row);
        });
      }
      
      searchInput.addEventListener('input', renderMembers);
      roleFilter.addEventListener('change', renderMembers);
      statusFilter.addEventListener('change', renderMembers);
      refreshBtn.addEventListener('click', loadMembers);
      
      loadMembers();
    });
  </script>
</body>
</html>